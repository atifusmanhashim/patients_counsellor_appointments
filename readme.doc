

Installation of Python 3.9

Execute the following Commands in sequence order using root user

Creation of “opt” directory and get Python 3.9.0 from https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz

cd /opt && sudo wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz

Unzip Python-3.9.18.tar.xz and configure Python 3.9.18

	sudo tar -xvf Python-3.9.18.tar.xz
	
	cd Python-3.9.18/

	sudo ./configure

	sudo make && sudo make install
	
Removing Python 3.9.18.tar.xz
	
	sudo rm -rf Python-3.9.18.tar.xz

	Check Python version

	python3 -V

	Python 3.9.18

	
Installation of MySQL and Creation of requuired Database



Installation of Python 3.9

Execute the following Commands in sequence order using root user

Creation of “opt” directory and get Python 3.9.0 from https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz

cd /opt && sudo wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz

Unzip Python-3.9.18.tar.xz and configure Python 3.9.18

	sudo tar -xvf Python-3.9.18.tar.xz
	
	cd Python-3.9.18/

	sudo ./configure

	sudo make && sudo make install
	
Removing Python 3.9.18.tar.xz
	
	sudo rm -rf Python-3.9.18.tar.xz

	Check Python version

	python3 -V

	Python 3.9.18

	
Installation of MySQL and Creation of requuired Database

# Database and User Creation with privileges 
mysql> create database patients_counsellor_appointments;
Query OK, 1 row affected (0.03 sec)

mysql> create user django_app_test@'localhost' identified by 'DjangoAppTest$$123';
Query OK, 0 rows affected (0.04 sec)

mysql> grant all privileges on patients_counsellor_appointments.* to django_app_test@'localhost';
Query OK, 0 rows affected (0.05 sec)

mysql> flush privileges;
Query OK, 0 rows affected (0.04 sec)


Creation of group of webapps and user under this group for Django app deployment

sudo groupadd --system webapps

sudo useradd --system --gid webapps --shell /bin/bash --home /webapps/patients_counsellor_appointments

Create a directory to store your application
Create a directory to store your application in /webapps/patients_counsellor_appointments /. Change the owner of that directory to your application user patients_counsellor_appointments :
$ sudo mkdir -p /webapps/patients_counsellor_appointments
$ sudo chown patients_counsellor_appointments /webapps/patients_counsellor_appointments

Allow limited access to other group users to application directory
$ sudo chown -R patients_counsellor_appointments:users /webapps/patients_counsellor_appointments
$ sudo chmod -R g+w /webapps/patients_counsellor_appointments
Now you can switch to your user
sudo su - patients_counsellor_appointments
// your console will switch to something like this
patients_counsellor_appointments@ip-server-ip:~$

Deploy Django app on server via Git in virtual environment
Deploying your app using a virtual environment allows your app and its requirements to be handled separately. It is good practice to keep your app isolated.
Using the environment concept is handy when you are deploying more than one Django app on a single instance to keep them and their dependencies isolated from each other.
We will be creating a virtual environment in our system user (patients_counsellor_appointments ) directory. Before that we will be installing git as a sudo user.

Installing Git and pulling your code from git repo
$ sudo apt-get install git
$ sudo su - patients_counsellor_appointments
// change to your repo https or ssh link
patients_counsellor_appointments @ip-server-ip:~$ git remote add origin https://github.com/atifusmanhashim/patients_counsellor_appointments.git
patients_counsellor_appointments @ip-server-ip:~$ git pull origin master

Note that we haven’t cloned our complete repo here. Instead we manually set our git link and only pulled the branch that we want to deploy to this instance. You may have a different instance for your development, beta, or production ready web app corresponding to each branch on git.

Creating virtual environment using Python 3.9 in current directory
patients_counsellor_appointments @ip-server-ip:~$ python3.9 -m venv .
patients_counsellor_appointments @ip-server-ip:~$ source bin/activate
(patients_counsellor_appointments )patients_counsellor_appointments @ip-server-ip:~$ pip install -r requirements.txt
At this point, we have successfully set up our project. Now we need to run some manage.py command. This will require that we are in the directory where our manage.py is present, or every time we need to give a path to it:
(patients_counsellor_appointments )patients_counsellor_appointments @ip-server-ip:~$ cd patients_counsellor_appointments
(patients_counsellor_appointments )patients_counsellor_appointments @ip-server-ip:~$ python manage.py migrate
(patients_counsellor_appointments )patients_counsellor_appointments @ip-server-ip:~$ python manage.py createsuperuser

Creation of Django Admin

# Django Admin
sername: admin
Email address: admin@test.com
password=test@123

Import Postman API Collection

Django App Test.postman_collection.json

1. Installing 3.9.18 using root user

Runnimg Following Commands

Building and installing dependencies
$ sudo apt install build-essential checkinstall
$ sudo apt install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev
Downloading & manually installing required Python version
$ cd /opt && sudo wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz
$ sudo tar -xvf Python-3.9.0.tar.xz
$ cd Python-3.9.18/
$ sudo ./configure
$ sudo make && sudo make install


Removing downloaded file
$ sudo rm -rf Python-3.6.6.tar.xz
Check Python version
$ python3 -V
> Python 3.9.18
Setting up Ubuntu user for our application
Django itself is very secure framework, I agree. But web applications are still vulnerable. It is good practice to run your application as system users with limited privileges which has limited access to resources on your server. So in this section, we will be adding a new user & permission group to our EC2 instance.
Adding ubuntu system group ‘groupname’ [webapps in my case] and assign a user ‘username’ [bunny in my case] to this group
$ sudo groupadd --system webapps
$ sudo useradd --system --gid webapps --shell /bin/bash --home /webapps/patients_counsellor_appointments patients_counsellor_appointments


